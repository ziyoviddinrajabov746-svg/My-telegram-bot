import os
import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask
import threading

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Health Check
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Multi-AI Bot is running!"

@app.route('/healthz')
def health_check():
    return "OK", 200

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host='0.0.0.0', port=5000, debug=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ AI
AVAILABLE_MODELS = {
    'deepseek': {
        'name': 'üß† DeepSeek Chat',
        'id': 'deepseek/deepseek-chat',
        'description': '–£–º–Ω–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á'
    },
    'deepseek-coder': {
        'name': 'üíª DeepSeek Coder',
        'id': 'deepseek/deepseek-coder', 
        'description': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∫–æ–¥–µ'
    },
    'gpt': {
        'name': 'ü§ñ GPT-3.5 Turbo',
        'id': 'openai/gpt-3.5-turbo',
        'description': '–ë—ã—Å—Ç—Ä–∞—è –∏ —É–º–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI'
    },
    'claude': {
        'name': 'üé≠ Claude Haiku',
        'id': 'anthropic/claude-3-haiku',
        'description': '–ë—ã—Å—Ç—Ä–∞—è –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Anthropic'
    },
    'gemini': {
        'name': 'üíé Gemini Pro',
        'id': 'google/gemini-pro',
        'description': '–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Google'
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_models = {}

print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
print(f"TELEGRAM_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELEGRAM_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"OPENROUTER_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENROUTER_API_KEY else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_models[user_id] = 'deepseek'
    
    await update.message.reply_text(
        'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –º—É–ª—å—Ç–∏-AI –±–æ—Ç!\n\n'
        '–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏:\n'
        '‚Ä¢ üß† DeepSeek - —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n'  
        '‚Ä¢ üíª DeepSeek Coder - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n'
        '‚Ä¢ ü§ñ GPT-3.5 - –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã\n'
        '‚Ä¢ üé≠ Claude - –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n'
        '‚Ä¢ üíé Gemini - –º–æ—â–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n\n'
        '–ö–æ–º–∞–Ω–¥—ã:\n'
        '/models - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π\n'
        '/model <–∏–º—è> - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n'
        '/current - —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å\n'
        '/help - –ø–æ–º–æ—â—å'
    )

async def models_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    models_text = "üõ† **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ AI:**\n\n"
    
    for key, model in AVAILABLE_MODELS.items():
        models_text += f"**{model['name']}**\n"
        models_text += f"–ö–ª—é—á: `{key}`\n"
        models_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}\n\n"
    
    models_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/model –∫–ª—é—á` –¥–ª—è –≤—ã–±–æ—Ä–∞"
    
    await update.message.reply_text(models_text)

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å. –ù–∞–ø—Ä–∏–º–µ—Ä: `/model deepseek`\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏: /models"
        )
        return
    
    model_key = context.args[0].lower()
    
    if model_key not in AVAILABLE_MODELS:
        await update.message.reply_text(
            f"‚ùå –ú–æ–¥–µ–ª—å `{model_key}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: /models"
        )
        return
    
    user_models[user_id] = model_key
    model_info = AVAILABLE_MODELS[model_key]
    
    await update.message.reply_text(
        f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: **{model_info['name']}**\n\n"
        f"{model_info['description']}"
    )

async def current_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    current_model_key = user_models.get(user_id, 'deepseek')
    model_info = AVAILABLE_MODELS[current_model_key]
    
    await update.message.reply_text(
        f"üîÆ **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {model_info['name']}\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {model_info['description']}\n\n"
        "–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: /models"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é deepseek)
    current_model_key = user_models.get(user_id, 'deepseek')
    model_id = AVAILABLE_MODELS[current_model_key]['id']
    model_name = AVAILABLE_MODELS[current_model_key]['name']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ OpenRouter
        headers = {
            'Authorization': f'Bearer {OPENROUTER_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'model': model_id,
            'messages': [
                {'role': 'user', 'content': user_message}
            ],
            'max_tokens': 1000
        }
        
        response = requests.post(
            'https://openrouter.ai/api/v1/chat/completions', 
            headers=headers, 
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            bot_response = result['choices'][0]['message']['content']
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –≤ –æ—Ç–≤–µ—Ç
            bot_response = f"ü§ñ **{model_name}**:\n\n{bot_response}"
        else:
            bot_response = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {model_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
    except Exception as e:
        bot_response = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}"
    
    await update.message.reply_text(bot_response)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üÜò **–ü–æ–º–æ—â—å –ø–æ –º—É–ª—å—Ç–∏-AI –±–æ—Ç—É:**\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/models - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π AI\n" 
        "/model <–∫–ª—é—á> - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n"
        "/current - —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
        "`/model gpt` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ GPT\n"
        "`/model claude` - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Claude\n"
        "`/model deepseek` - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ DeepSeek"
    )

def main():
    if not TELEGRAM_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not OPENROUTER_API_KEY:
        print("‚ùå –û–®–ò–ë–ö–ê: OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    print("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏-AI –±–æ—Ç–∞...")
    app_bot = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CommandHandler("models", models_command))
    app_bot.add_handler(CommandHandler("model", model_command))
    app_bot.add_handler(CommandHandler("current", current_command))
    app_bot.add_handler(CommandHandler("help", help_command))
    app_bot.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ú—É–ª—å—Ç–∏-AI –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    app_bot.run_polling()

if __name__ == '__main__':
    main()
