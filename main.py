import os
import logging
import requests
import io
import aiohttp
from gtts import gTTS
from pydub import AudioSegment
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask
import threading
import asyncio

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Health Check
app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Multi-AI Bot is running!"

@app.route('/healthz')
def health_check():
    return "OK", 200

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host='0.0.0.0', port=5000, debug=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ AI
AVAILABLE_MODELS = {
    'deepseek': {
        'name': 'üß† DeepSeek Chat',
        'id': 'deepseek/deepseek-chat',
        'description': '–£–º–Ω–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á'
    },
    'deepseek-coder': {
        'name': 'üíª DeepSeek Coder',
        'id': 'deepseek/deepseek-coder', 
        'description': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∫–æ–¥–µ'
    },
    'gpt': {
        'name': 'ü§ñ GPT-3.5 Turbo',
        'id': 'openai/gpt-3.5-turbo',
        'description': '–ë—ã—Å—Ç—Ä–∞—è –∏ —É–º–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI'
    },
    'claude': {
        'name': 'üé≠ Claude Haiku',
        'id': 'anthropic/claude-3-haiku',
        'description': '–ë—ã—Å—Ç—Ä–∞—è –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Anthropic'
    },
    'gemini': {
        'name': 'üíé Gemini Pro',
        'id': 'google/gemini-pro',
        'description': '–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Google'
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_models = {}

print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
print(f"TELEGRAM_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELEGRAM_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
print(f"OPENROUTER_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENROUTER_API_KEY else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
async def text_to_speech(text: str, lang: str = 'ru') -> io.BytesIO:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        tts = gTTS(text=text, lang=lang, slow=False)
        mp3_fp = io.BytesIO()
        tts.write_to_fp(mp3_fp)
        mp3_fp.seek(0)
        
        audio = AudioSegment.from_mp3(mp3_fp)
        ogg_fp = io.BytesIO()
        audio.export(ogg_fp, format="ogg")
        ogg_fp.seek(0)
        
        return ogg_fp
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ TTS: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        voice = update.message.voice
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        voice_file = await voice.get_file()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        async with aiohttp.ClientSession() as session:
            async with session.get(voice_file.file_path) as response:
                if response.status == 200:
                    response_text = "üé§ –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–∫–∞ —è —É–º–µ—é —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /voice"
                    await update.message.reply_text(response_text)
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –ö–æ–º–∞–Ω–¥–∞ /voice - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def voice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç AI –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        user_message = ' '.join(context.args)
        
        if not user_message:
            await update.message.reply_text(
                "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /voice\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /voice –ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?\n\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º!"
            )
            return
        
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="record_voice")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        user_id = update.effective_user.id
        current_model_key = user_models.get(user_id, 'deepseek')
        model_id = AVAILABLE_MODELS[current_model_key]['id']
        model_name = AVAILABLE_MODELS[current_model_key]['name']
        
        headers = {
            'Authorization': f'Bearer {OPENROUTER_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'model': model_id,
            'messages': [{'role': 'user', 'content': user_message}],
            'max_tokens': 500
        }
        
        response = requests.post(
            'https://openrouter.ai/api/v1/chat/completions', 
            headers=headers, 
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            ai_response = result['choices'][0]['message']['content']
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            if len(ai_response) > 500:
                ai_response = ai_response[:497] + "..."
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ –≥–æ–ª–æ—Å
            voice_audio = await text_to_speech(ai_response)
            
            if voice_audio:
                await update.message.reply_voice(
                    voice=voice_audio,
                    caption=f"üé§ {model_name}: {ai_response}"
                )
            else:
                await update.message.reply_text(f"ü§ñ {model_name}:\n\n{ai_response}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ voice_command: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = update.effective_user.id
        user_models[user_id] = 'deepseek'
        
        await update.message.reply_text(
            'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –º—É–ª—å—Ç–∏-AI –±–æ—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏! üé§\n\n'
            '–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n'
            '‚Ä¢ üé§ –û—Ç–≤–µ—á–∞—é –≥–æ–ª–æ—Å–æ–º –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n'
            '‚Ä¢ /voice [—Ç–µ–∫—Å—Ç] - –ø—Ä–µ–æ–±—Ä–∞–∑—É—é —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ\n'
            '‚Ä¢ üéôÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n'
            '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
            '/models - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π\n'
            '/model <–∏–º—è> - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n'
            '/current - —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å\n'
            '/voice - –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã\n'
            '/help - –ø–æ–º–æ—â—å\n\n'
            '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É! üéµ'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

async def models_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        models_text = "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ AI:\n\n"
        
        for key, model in AVAILABLE_MODELS.items():
            models_text += f"{model['name']}\n"
            models_text += f"–ö–ª—é—á: `{key}`\n"
            models_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}\n\n"
        
        models_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/model –∫–ª—é—á` –¥–ª—è –≤—ã–±–æ—Ä–∞"
        await update.message.reply_text(models_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ models_command: {e}")

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
    try:
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å. –ù–∞–ø—Ä–∏–º–µ—Ä: `/model deepseek`\n"
                "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏: /models"
            )
            return
        
        model_key = context.args[0].lower()
        
        if model_key not in AVAILABLE_MODELS:
            await update.message.reply_text(
                f"‚ùå –ú–æ–¥–µ–ª—å `{model_key}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: /models"
            )
            return
        
        user_models[user_id] = model_key
        model_info = AVAILABLE_MODELS[model_key]
        
        await update.message.reply_text(
            f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {model_info['name']}\n\n"
            f"{model_info['description']}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ model_command: {e}")

async def current_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å"""
    try:
        user_id = update.effective_user.id
        current_model_key = user_models.get(user_id, 'deepseek')
        model_info = AVAILABLE_MODELS[current_model_key]
        
        await update.message.reply_text(
            f"üîÆ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model_info['name']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {model_info['description']}\n\n"
            "–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: /models"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ current_command: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        user_id = update.effective_user.id
        user_message = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_model_key = user_models.get(user_id, 'deepseek')
        model_id = AVAILABLE_MODELS[current_model_key]['id']
        model_name = AVAILABLE_MODELS[current_model_key]['name']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ OpenRouter
        headers = {
            'Authorization': f'Bearer {OPENROUTER_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'model': model_id,
            'messages': [
                {'role': 'user', 'content': user_message}
            ],
            'max_tokens': 1000
        }
        
        response = requests.post(
            'https://openrouter.ai/api/v1/chat/completions', 
            headers=headers, 
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            bot_response = result['choices'][0]['message']['content']
            # –ë–µ–∑ –∑–≤—ë–∑–¥–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            bot_response = f"ü§ñ {model_name}:\n\n{bot_response}"
        else:
            bot_response = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {model_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
    except requests.exceptions.Timeout:
        bot_response = "‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        bot_response = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}"
    
    await update.message.reply_text(bot_response)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    try:
        await update.message.reply_text(
            "üÜò –ü–æ–º–æ—â—å –ø–æ –º—É–ª—å—Ç–∏-AI –±–æ—Ç—É:\n\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/models - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π AI\n" 
            "/model <–∫–ª—é—á> - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n"
            "/current - —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å\n"
            "/voice - –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "`/model gpt` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ GPT\n"
            "`/model claude` - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Claude\n"
            "`/voice –ø—Ä–∏–≤–µ—Ç` - –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not OPENROUTER_API_KEY:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.daemon = True
        flask_thread.start()
        logger.info("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏-AI –±–æ—Ç–∞...")
        app_bot = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app_bot.add_error_handler(error_handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app_bot.add_handler(CommandHandler("start", start))
        app_bot.add_handler(CommandHandler("models", models_command))
        app_bot.add_handler(CommandHandler("model", model_command))
        app_bot.add_handler(CommandHandler("current", current_command))
        app_bot.add_handler(CommandHandler("voice", voice_command))
        app_bot.add_handler(CommandHandler("help", help_command))
        app_bot.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
        app_bot.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        logger.info("‚úÖ –ú—É–ª—å—Ç–∏-AI –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        app_bot.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
