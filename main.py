import os
import logging
import requests
import io
import aiohttp
import time
import threading
import asyncio
from datetime import datetime
from gtts import gTTS
from pydub import AudioSegment
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from flask import Flask

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

# ==================== –°–ò–°–¢–ï–ú–ê –ü–ê–ú–Ø–¢–ò ====================
user_models = {}
user_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
conversation_history = {}  # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤

# ==================== –ú–û–î–ï–õ–ò AI ====================
AVAILABLE_MODELS = {
    'deepseek': {
        'name': 'üß† DeepSeek Chat',
        'id': 'deepseek/deepseek-chat',
        'description': '–£–º–Ω–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á'
    },
    'deepseek-coder': {
        'name': 'üíª DeepSeek Coder',
        'id': 'deepseek/deepseek-coder', 
        'description': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∫–æ–¥–µ'
    },
    'gpt': {
        'name': 'ü§ñ GPT-3.5 Turbo',
        'id': 'openai/gpt-3.5-turbo',
        'description': '–ë—ã—Å—Ç—Ä–∞—è –∏ —É–º–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI'
    },
    'claude': {
        'name': 'üé≠ Claude Haiku',
        'id': 'anthropic/claude-3-haiku',
        'description': '–ë—ã—Å—Ç—Ä–∞—è –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Anthropic'
    },
    'gemini': {
        'name': 'üíé Gemini Pro',
        'id': 'google/gemini-pro',
        'description': '–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Google'
    }
}

# ==================== FLASK –†–û–£–¢–´ ====================
@app.route('/')
def home():
    return "ü§ñ Multi-AI Bot is running! üöÄ"

@app.route('/healthz')
def health_check():
    return {"status": "OK", "timestamp": datetime.now().isoformat()}, 200

@app.route('/stats')
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    return {
        "users_count": len(user_models),
        "active_users": len(user_stats),
        "timestamp": datetime.now().isoformat()
    }

def run_flask():
    app.run(host='0.0.0.0', port=5000, debug=False)

# ==================== –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò ====================
def keep_bot_awake():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–∏–Ω–≥—É–µ—Ç —Å–∞–º —Å–µ–±—è —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞—Ç—å"""
    def ping():
        time.sleep(30)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Flask
        while True:
            try:
                requests.get("http://localhost:5000/healthz", timeout=10)
                logger.info("‚úÖ Keep-alive ping sent")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Keep-alive ping failed: {e}")
            time.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    
    ping_thread = threading.Thread(target=ping)
    ping_thread.daemon = True
    ping_thread.start()

# ==================== –£–¢–ò–õ–ò–¢–´ ====================
async def text_to_speech(text: str, lang: str = 'ru') -> io.BytesIO:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 500:
            text = text[:497] + "..."
            
        tts = gTTS(text=text, lang=lang, slow=False)
        mp3_fp = io.BytesIO()
        tts.write_to_fp(mp3_fp)
        mp3_fp.seek(0)
        
        audio = AudioSegment.from_mp3(mp3_fp)
        ogg_fp = io.BytesIO()
        audio.export(ogg_fp, format="ogg")
        ogg_fp.seek(0)
        
        return ogg_fp
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ TTS: {e}")
        return None

def update_user_stats(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_stats:
        user_stats[user_id] = {
            'first_seen': datetime.now(),
            'message_count': 0,
            'last_active': datetime.now()
        }
    user_stats[user_id]['message_count'] += 1
    user_stats[user_id]['last_active'] = datetime.now()

# ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = update.effective_user.id
        user_models[user_id] = 'deepseek'
        update_user_stats(user_id)
        
        welcome_text = (
            'ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø —É–ª—É—á—à–µ–Ω–Ω—ã–π –º—É–ª—å—Ç–∏-AI –±–æ—Ç!** üöÄ\n\n'
            '‚ú® **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n'
            '‚Ä¢ üß† **–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å** - –ø–æ–º–Ω—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n'
            '‚Ä¢ üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n'
            '‚Ä¢ ‚ö° **–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞** - –Ω–µ –∑–∞—Å—ã–ø–∞—é\n'
            '‚Ä¢ üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã** - –≥–æ–≤–æ—Ä—é –≥–æ–ª–æ—Å–æ–º\n\n'
            'üîß **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n'
            '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
            '/models - —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π AI\n'
            '/model <–∏–º—è> - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n'
            '/current - —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å\n'
            '/voice <—Ç–µ–∫—Å—Ç> - –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç\n'
            '/stats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n'
            '/help - –ø–æ–º–æ—â—å\n\n'
            '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å! üòä'
        )
        
        await update.message.reply_text(welcome_text)
        logger.info(f"üéØ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = update.effective_user.id
        update_user_stats(user_id)
        
        if user_id in user_stats:
            stats = user_stats[user_id]
            current_model = user_models.get(user_id, 'deepseek')
            model_name = AVAILABLE_MODELS[current_model]['name']
            
            stats_text = (
                f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
                f"‚Ä¢ ü§ñ **–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:** {model_name}\n"
                f"‚Ä¢ üí¨ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {stats['message_count']}\n"
                f"‚Ä¢ üïê **–ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** {stats['first_seen'].strftime('%d.%m.%Y %H:%M')}\n"
                f"‚Ä¢ ‚è∞ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {stats['last_active'].strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_stats)}"
            )
        else:
            stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
        await update.message.reply_text(stats_text)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stats_command: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def models_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        update_user_stats(update.effective_user.id)
        
        models_text = "üõ† **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ AI:**\n\n"
        
        for key, model in AVAILABLE_MODELS.items():
            models_text += f"**{model['name']}**\n"
            models_text += f"–ö–ª—é—á: `{key}`\n"
            models_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}\n\n"
        
        models_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/model –∫–ª—é—á` –¥–ª—è –≤—ã–±–æ—Ä–∞"
        await update.message.reply_text(models_text)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ models_command: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
    try:
        user_id = update.effective_user.id
        update_user_stats(user_id)
        
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å. –ù–∞–ø—Ä–∏–º–µ—Ä: `/model deepseek`\n"
                "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏: /models"
            )
            return
        
        model_key = context.args[0].lower()
        
        if model_key not in AVAILABLE_MODELS:
            await update.message.reply_text(
                f"‚ùå –ú–æ–¥–µ–ª—å `{model_key}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: /models"
            )
            return
        
        user_models[user_id] = model_key
        model_info = AVAILABLE_MODELS[model_key]
        
        await update.message.reply_text(
            f"‚úÖ **–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:** {model_info['name']}\n\n"
            f"{model_info['description']}\n\n"
            f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {model_info['name']} –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤!"
        )
        logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å –Ω–∞ {model_key}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ model_command: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏")

async def current_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å"""
    try:
        user_id = update.effective_user.id
        update_user_stats(user_id)
        
        current_model_key = user_models.get(user_id, 'deepseek')
        model_info = AVAILABLE_MODELS[current_model_key]
        
        await update.message.reply_text(
            f"üîÆ **–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:** {model_info['name']}\n"
            f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {model_info['description']}\n\n"
            "–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: /models"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ current_command: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏")

async def voice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        user_id = update.effective_user.id
        update_user_stats(user_id)
        user_message = ' '.join(context.args)
        
        if not user_message:
            await update.message.reply_text(
                "üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã**\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "`/voice –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?`\n\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Ç–µ–∫—Å—Ç–æ–º!"
            )
            return
        
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="record_voice")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        current_model_key = user_models.get(user_id, 'deepseek')
        model_id = AVAILABLE_MODELS[current_model_key]['id']
        model_name = AVAILABLE_MODELS[current_model_key]['name']
        
        headers = {
            'Authorization': f'Bearer {OPENROUTER_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'model': model_id,
            'messages': [{'role': 'user', 'content': user_message}],
            'max_tokens': 500
        }
        
        response = requests.post(
            'https://openrouter.ai/api/v1/chat/completions', 
            headers=headers, 
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            ai_response = result['choices'][0]['message']['content']
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ –≥–æ–ª–æ—Å
            voice_audio = await text_to_speech(ai_response)
            
            if voice_audio:
                await update.message.reply_voice(
                    voice=voice_audio,
                    caption=f"üé§ {model_name}: {ai_response}"
                )
                logger.info(f"üé§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                await update.message.reply_text(f"ü§ñ {model_name}:\n\n{ai_response}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ voice_command: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        user_id = update.effective_user.id
        user_message = update.message.text
        update_user_stats(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_model_key = user_models.get(user_id, 'deepseek')
        model_id = AVAILABLE_MODELS[current_model_key]['id']
        model_name = AVAILABLE_MODELS[current_model_key]['name']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ OpenRouter
        headers = {
            'Authorization': f'Bearer {OPENROUTER_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'model': model_id,
            'messages': [
                {'role': 'user', 'content': user_message}
            ],
            'max_tokens': 1000
        }
        
        response = requests.post(
            'https://openrouter.ai/api/v1/chat/completions', 
            headers=headers, 
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            bot_response = result['choices'][0]['message']['content']
            # –ë–µ–∑ –∑–≤—ë–∑–¥–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            bot_response = f"ü§ñ {model_name}:\n\n{bot_response}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if user_id not in conversation_history:
                conversation_history[user_id] = []
            conversation_history[user_id].append({
                'question': user_message,
                'answer': bot_response,
                'timestamp': datetime.now()
            })
            
        else:
            bot_response = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {model_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
    except requests.exceptions.Timeout:
        bot_response = "‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        bot_response = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}"
    
    await update.message.reply_text(bot_response)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    try:
        update_user_stats(update.effective_user.id)
        
        help_text = (
            "üÜò **–ü–æ–º–æ—â—å –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–º—É AI-–±–æ—Ç—É:**\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/models - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π AI\n" 
            "/model <–∫–ª—é—á> - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n"
            "/current - —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å\n"
            "/voice <—Ç–µ–∫—Å—Ç> - –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç\n"
            "/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "`/model gpt` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ GPT\n"
            "`/model claude` - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Claude\n"
            "`/voice –ü—Ä–∏–≤–µ—Ç!` - –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç\n"
            "`/stats` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
            "**–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å** - –∏ —è –æ—Ç–≤–µ—á—É! üöÄ"
        )
        
        await update.message.reply_text(help_text)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ help_command: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    error = context.error
    logger.error(f"üî• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {error}", exc_info=True)
    
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º—É–ª—å—Ç–∏-AI –±–æ—Ç–∞...")
    
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not OPENROUTER_API_KEY:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.daemon = True
        flask_thread.start()
        logger.info("‚úÖ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        keep_bot_awake()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ keep-alive –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
        app_bot = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app_bot.add_error_handler(error_handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        handlers = [
            CommandHandler("start", start),
            CommandHandler("models", models_command),
            CommandHandler("model", model_command),
            CommandHandler("current", current_command),
            CommandHandler("voice", voice_command),
            CommandHandler("stats", stats_command),
            CommandHandler("help", help_command),
            MessageHandler(filters.VOICE, handle_voice_message),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ]
        
        for handler in handlers:
            app_bot.add_handler(handler)
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        app_bot.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main()                     
